## Leading Question 
We will use disjoint sets and a BFS traversal to create a maze with random "enemies", Dijkstra's Alogrithm to find the shortest path, and a graphical output of a graph to show our results to answer the question: what is the best way to navigate a convention maze filled with enemies that are also popular twitch-gamers.

## Dataset Acquisition

## Data Format
The graph can be pictured as a square grid.  Each square build piece (we refer to it as a block) is represented by an (x,y) coordinate, with (0,0) in the upper left corner. The block will hold either an enemy, an obstacle or nothing.  If the block holds an obstacle you cannot travel there.  If it holds an enemy we assume you can travel there, because you would hypothetically be able to defeat the enemy and free the space.  From a block you can travel left, right, up, and down providing there is not an obstacle blocking you.  Each edge will be weighted.  There will be a base weight for walking and the weight will increase if there is an enemy in the square you are trying to travel to. 
We will be using twitch-gamers as a dataset to make the enemies.  We will get the top 1000 streamers (in terms of either views or subs) and randomly choose enemies from this to place throughout the room. More difficult (higher views/subs) enemies will have heigher weights on the edges leading to the block they are placed on. The enemy data will be stored in a BST so it is easier to find a specific enemy. 


## Data Correction
We will parse through the data, and form a BST. If any error occurs due to a null or empty value, we will skip over it. If any other unexpected value happens we will just skip over it.  If a block holds some unexpected value (not an enemy, obstacle, or empty value) we will assume it is empty. We will have tests to make sure no out of bounds values are in our structures while we are getting the code to work so we can hopefully minimize errors.  If an edge weight is negative we will assume it doesn't exist.  

## Data Storage
We will assign blocks as objects with a type of either an enemy, an obstacle, or an empty space. We will store this as well as the x,y coordinate in a struct (each instance of the struct will be a block). The graph structure for the maze will be stored in an adjacency matrix.  You can only move left, right, up, or down from each node so this will be an l*w x 4 matrix.  For directions that don't have an edge (are blocked) the edge weight will be -1. As potential enemies will be stored in a binary search tree, each enemy generated will be represented as a node in the tree with O(N) storage space complexity. An individual node will possess information regarding the difficulty level of the enemy which will be represented as an integer variable. We will need to store the length and width of the room. These integer variables will have O(1) storage space complexity. 

## Algorithm 
The data will be a series of blocks that make up the room to be generated.  Each block can either contain an enemy or an obstacle.  There will be l * w blocks where l is the length of the room and w is the width. There will be at least 2 doors in a room and there must be at least one path from one door to the other.
We will be using the disjoint lists data structure to generate a maze room with an entrance and an exit.   It will have obstacles and enemies with multiple paths between doors.  This is similar to the algorithms in MP mazes as we will use a BFS traversal to form the room which is a maze. This part of the project will require a size for the room and an entrance location and it will output the completed room.  This should take O(n log n + m) time to complete n -1 unions and m finds. 
The second part of the project will be to add enemies and show the best way to travel through the room.  For this section, after randomly assigning enemies and updating all the edge weights based on the enemies, we add a weight to each edge for the cost of walking. Once the room is done we can use Dijkstra's algorithm to find the best way through the maze. We repeat this some number of times (~5-10) with different edge weights designated for walking to examine how this affects the result. The time complexity of this is O((v+e)logv) where v is the number of nodes and e is the number of edges. In our case each node has up to 4 edges (directions you can travel) and l*w nodes. 
Finally, we want to be able to show this information to the user.  Given a room and the most efficient path through the room for each testing walking cost, we will be using a Graphic Output of Graph algorithm to overlay the hypothetical solutions to find the exit onto the room.
Possible expansions if time permits: 
-allowing the user to choose what point they want to reach (ex. looking for the quickest way to find a specific streamer in the room) 
-increasing edge weights on adjacent nodes also to simulate crowds near a strong enemy

## Timeline
    November 7 - November 13
        Select dataset and create basic project framework including methods, variables, and objects necessary for the program.
    
    November 14 - November 20
        Implement algorithm for obstacle generation and prepare for midpoint checkin with project mentor. If time permits, begin working on enemy generation.
    
    November 21 - November 27
        Generate enemies and begin work on edge weights and the solution.  
    
    November 28 - December 4
        Finish the code to solve the maze. Test code and fix any remaining bugs. Work on README.md in github and begin project report. Start recording for final project video.
    
    December 5 - December 8 
        Complete project write up and final project video.
